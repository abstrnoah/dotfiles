# zshrc

# EXPORTED ENVIRONMENT {{{1
export KEYTIMEOUT=1
export BR_REPOROOT="${HOME}/repository"

# GLOBALS {{{1
BR_PROMPTCHAR=ðŸ¢’
NL=$'\n'

# PARAMETERS {{{1
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=2000
PROMPT_0="%B${BR_PROMPTCHAR}%b "
PROMPT_1='%s%B%n %M %75<..<%~%b %? %#'
PROMPT="${PROMPT_1}${NL}${PROMPT_0}"

# OPTIONS {{{1
setopt appendhistory
setopt extendedglob nomatch notify no_beep
setopt prompt_cr prompt_sp
setopt no_multios

# KEY BINDINGS {{{1
bindkey -v
bindkey -v "^r" history-incremental-pattern-search-backward
bindkey -v "^ " push-line-or-edit
bindkey -a "^ " push-line-or-edit

# COMPLETIONS {{{1
# New completions, 'zshcompsys'.
zstyle :compinstall filename '/home/abstractednoah/.zshrc'
autoload -Uz compinit
compinit
source ~/.dotfiles/package/zsh/comp-mux.zsh

# FUNCTIONS {{{1
_br_command_exists () { # commands-to-check...
    while test "${#}" -gt 0; do
        command -v "${1}" &>/dev/null || return 1
        shift
    done
}

_br_oops() { # message
    echo "${1}" 1>&2
    return 1
}

_br_require() { # required-command
    _br_command_exists "${1}" || _br_oops "Required command not found: ${1}"
}

_br_command_exists tmux && {
    _br_reload_tmux () {
        _br_require tmux
        tmux source-file ~/.tmux.conf
    }
}

_br_command_exists xclip && {
    Y() {
        xclip -selection clipboard
    }

    P() {
        xclip -selection clipboard -o
    }
}

_br_command_exists tmux tmuxinator && {
    _br_tmux_go_last() {
        tmux a >&2 2>/dev/null || tmuxinator main
    }
    alias T='_br_tmux_go_last'

    gomux() { # Init or attach tmux with start directory $1.
        local start_directory="$(readlink -f "${1}")"
        local session_name="$(basename "${start_directory:-.}")"
        tmux has-session -t "${session_name}" 2> /dev/null || {
            tmux new-session -d -s "${session_name}" -c "${start_directory}"
        }
        if test -z "${TMUX}"; then
            tmux attach -t "${session_name}"
        else
            tmux switch-client -t "${session_name}"
        fi
    }
}

_br_command_exists nix-env && {
    br_nix_env() {
        # TODO Yes, it seems redundant to have both -I and -f. But there
        # was some reason important reason to have both... the solution is to
        # just learn to grok nix lol.
        # TODO AN_NIXPKGS -> BR_NIXPKGS or just NIXPKGS
        nix-env -I an_nixpkgs="${AN_NIXPKGS}" -f "${AN_NIXPKGS}" "${@}"
    }

    br_reload_nix_packages() {
        nix-env -v -riA "${@}"
    }
}

br_open () { # <path to xdg-open-able file>
    # Suffix '&!' means 'disown' in zsh.
    xdg-open "${1}" &!
}
alias O='br_open'

ssh() {
    test -z "${TMUX}" || _br_oops "Don't ssh from tmux, fool!" || return
    command ssh "${@}"
}

_br_command_exists bat && {
    cat() {
        bat --paging=never "${@}"
    }

    bathelp() {
        bat --plain --language help "${@}"
    }

    _br_command_exists batman && {
        man() {
            batman "${@}"
        }
    }

    _br_command_exists batwatch && {
        gitwatch() {
            local _num_commits=$(($(tput lines) - 5))
            batwatch \
                --plain -lgitlog \
                -x \
                git log \
                --oneline --decorate --graph --all \
                -n ${_num_commits} \
                "${@}"
        }
    }
}

br_fd() {
    fd --hidden --follow --exclude ".git" "${@}"
}

_br_list_git_roots() {
    # TODO handle bare repositories.
    fd --hidden --prune --type d '^\.git$' . "${1:-.}" | sed 's:/\.git$::'
}

_br_list_paths() {
    # TODO
}

_br_list_files() {
    # TODO
}

_br_list_dirs() {
    # TODO
}



# EXPERIMENTAL {{{1
# TODO

# fzf
source ~/.nix-profile/share/fzf/completion.zsh
source ~/.nix-profile/share/fzf/key-bindings.zsh
bindkey -M vicmd -r '\ec'
bindkey -M viins -r '\ec'
bindkey -M vicmd '^G' fzf-cd-widget
bindkey -M viins '^G' fzf-cd-widget
export BR_FZF_BAT='bat --style=numbers --color=always --line-range :500 {}'
export FZF_DEFAULT_COMMAND='fd --hidden --follow --exclude .git'
export FZF_DEFAULT_OPTS='--multi --border --reverse'
export FZF_CTRL_T_COMMAND="${FZF_DEFAULT_COMMAND}"
export FZF_CTRL_T_OPTS="--preview '${BR_FZF_BAT}' --border"
export FZF_CTRL_R_OPTS='--border --reverse'
export FZF_ALT_C_OPTS='--border'
export FZF_COMPLETION_OPTS='--border --height 60%'
_fzf_compgen_path() {
  fd --hidden --follow --exclude ".git" . "$1"
}
_fzf_compgen_dir() {
  fd --type d --hidden --follow --exclude ".git" . "$1"
}
if command -v fzf &> /dev/null; then
    if command -v br-fd-git &> /dev/null; then
        fzf-repo() { br-fd-git -r ~/repository | fzf }
    fi
fi

# ENTER HOOK {{{1
test -z "${TMUX}" && _br_command_exists _br_tmux_go_last && {
    _br_tmux_go_last
}

# MODELINE {{{1
# vim:ft=zsh:fdm=marker:fmr={{{,}}}:fen:tw=80:et:ts=4:sts=4:sw=0:
