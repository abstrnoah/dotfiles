" Note: Re file structure: This file uses vim's 'fold-marker' feature. Levels
" 1 and 2 are enumerated and reserved for sections; deeper levels are not
" enumerated. We try to avoid going deeper than three levels.

" SETUP {{{1
set nocompatible
set exrc
set secure

for c in ["a", "c", "d"]
    exe "set guioptions+="..c
endfor
for c in ["m", "r", "R", "l", "L", "b", "T"]
    exe "set guioptions-="..c
endfor
" GUI {{{1
" For those rare occasions.

" BUILTIN PLUGINS {{{1

runtime macros/matchit.vim

" Automatic installation.
" [https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation]
" VIM-PLUG PLUGINS {{{1
" Plugins are declared here, configured below under "PLUGIN CONFIG"
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.cache/vimplug')
    " Must have.
    Plug '907th/vim-auto-save'
    Plug 'Townk/vim-autoclose'
    Plug 'tpope/vim-surround'
    Plug 'wellle/targets.vim'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'tpope/vim-repeat'
    " Should have.
    Plug 'lervag/vimtex', {'for': 'tex'}
    Plug 'justinmk/vim-sneak'
    Plug 'tpope/vim-eunuch'
    Plug 'dkarter/bullets.vim'
    Plug 'dhruvasagar/vim-table-mode'
    Plug 'tommcdo/vim-lion'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-fugitive'
    " Fancy and useful extras.
    Plug 'preservim/nerdtree'
    Plug 'preservim/tagbar'
    Plug 'tpope/vim-abolish'
    Plug 'chaoren/vim-wordmotion'
    " Frills.
    Plug 'Yggdroot/indentLine'
    Plug 'abstractednoah/vim-markdownfootnotes', {'branch': 'develop'}
    " These ones are on thin ice.
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'honza/vim-snippets'
    Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
    Plug 'puremourning/vimspector'
    " Theme.
    Plug 'altercation/vim-colors-solarized'
call plug#end()

" Called automatically by `plug#end`.
"filetype plugin indent on
"syntax enable


" FUNCTIONS {{{1

" TODO: Should probably be moved to its own plugin directory at some point.
function AN_NERDTree()
    " Call `:NERDTreeFind` if path nonempty, otherwise `:NERDTreeVCS`.
    if &modifiable && strlen(expand("%")) > 0 && !&diff
        NERDTreeFind
    else
        NERDTreeVCS
    endif
endfunction

" See [https://vim.fandom.com/wiki/Search_across_multiple_lines].
" TODO learn more about functions, esp. arguments.
" TODO also search across underscores.
" Search across lines and non-word characters. Case-sensitive if '!'.
function! SearchMultiline(bang, ...)
    if a:0 > 0
        "let sep = (a:bang) ? '\_W\+' : '\_s\+'
        let sep = '\(\_W\|_\)\+'
        let @/ = join(a:000, sep) . ((a:bang) ? "" : '\c')
    endif
endfunction

" TODO: Remove this function, replace with global setting.
function EnableColorColumn()
    set colorcolumn=+1
endfunction

function ToggleColorColumn()
    if &colorcolumn == ""
        call EnableColorColumn()
    else
        setlocal colorcolumn=
    endif
endfunction

function ToggleTableMode()
    if tablemode#IsActive()
        call EnableColorColumn()
        call tablemode#Disable()
    else
        setlocal colorcolumn=
        call tablemode#Enable()
    endif
endfunction


" MAPS {{{1
" For most mapping, see 'after/plugin/map.vim'. We put them there to ensure our
" mappings override both vim and plugin defaults. The convention is that all
" mappings go there unless they need to go elsewhere for some reason. Coc's
" bindings are in 'cocrc.vim' bc coc is so much. When plugins have an option
" like 'g:plugin_featureX_map', those are set here.

let mapleader = " "
let maplocalleader = " "
" Leader key for navigation-type operations such as fuzzy find files, etc.
let g:br_leader_nav = "<leader>e"
" For footnote operations.
let g:br_leader_note = "<leader>n"
set showcmd
set timeoutlen=500

" COMMANDS {{{1

command TrimTrailingWhitespace %s/\s\+$//g
" TODO: Make these work from visual mode by using direct '<c-r>='.
command! -bang -nargs=* -complete=tag S
    \ call SearchMultiline(<bang>0, <f-args>)
    \ | normal! /<C-R>/<CR>
command! -bang -nargs=* -complete=tag SB
    \ call SearchMultiline(<bang>0, <f-args>)
    \ | normal! ?<C-R>/<CR>
" FIXME: This doesn't work because it clears custom theme below. Theme below
" needs to be moved to a fork of solarized.
" command ToggleBG let &background = ( &background == "dark"? "light" : "dark" )

"
" Ecoding.
"
set encoding=utf-8
" LOOK {{{1

set number
set scrolloff=3
set laststatus=2
set statusline=%<%f\ %h%m%r\ %y%=%-14.(%l,%c%V%)\ %P
" Folding really just gets in my way, so disable for now.
set nofoldenable
set foldmethod=syntax
set foldlevelstart=99

"
" Theme
" TODO: Move to a fork of solarized.
"
set background=dark
colorscheme solarized
set incsearch hlsearch

" Fixed preformance issue,
" see [https://vim.fandom.com/wiki/Highlight_unwanted_spaces].
autocmd BufWinLeave * call clearmatches()

" (Still not sure about these.)
" highlight Search ctermbg=black
" highlight Visual ctermbg=black
" hi Folded ctermbg=black ctermfg=grey

" TrailingWhitespace.
" TODO: Factor some of these regexes as variables.
highlight TrailingWhitespace ctermbg=red
match TrailingWhitespace /\s\+$/
autocmd BufWinEnter * match TrailingWhitespace /\s\+$/
" TODO Figure out how this pattern works.
autocmd InsertEnter * match TrailingWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match TrailingWhitespace /\s\+$/

" Accent current line number.
set cursorline
hi CursorLine cterm=none
hi CursorLineNr cterm=bold

"
" Indent, wrap, margins, format
"
call EnableColorColumn()
highlight ColorColumn ctermbg=black
set tabstop=4 expandtab softtabstop=4
set wrap linebreak nolist textwidth=80
set autoindent
set shiftwidth=4
set formatoptions+=j
set nojoinspaces

" ABBREVIATIONS {{{1
inoreabbrev -[] - [ ]

" SPELL {{{1
set spelloptions=camel
set spellcapcheck=


" PLUGIN CONFIG {{{1

" AUTOSAVE {{{2
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0

" NERDTREE {{{2
let NERDTreeQuitOnOpen = 1
" FIXME: Conceal is causing "^G" to show up in netrw mode (not side mode), need
" to change conceal settings upon opening NERDTree.
let NERDTreeHijackNetrw = 1

" COC {{{2
source ~/.vim/cocrc.vim

" VIMSPECTOR {{{2
let g:vimspector_install_gadgets = [
    \ 'debugpy',
    \ 'vscode-cpptools',
    \ 'vscode-java-debug'
\]

" CTRLP {{{2
let g:ctrlp_map = ''
let g:ctrlp_cmd = ''
let g:ctrlp_working_path_mode = "ra"
let g:ctrlp_show_hidden = 1
let g:ctrlp_mruf_relative = 1
let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
    \ },
    \ 'fallback': 'find %s -type f'
\ }

" GUTENTAGS {{{2
let g:gutentags_cache_dir = "~/.cache/gutentags"
set statusline^=%{gutentags#statusline()}\|

" TAGBAR {{{2
let g:tagbar_sort = 1

" BULLET {{{2
let g:bullets_checkbox_markers = '    x'
" Use numbers for all levels of enumerated lists.
" This is partly for uniformity, but also because `vim-markdown` makes numbered
" lists pretty, yet does not recognize alphabetic lists so does not make them
" pretty.
let g:bullets_outline_levels = ['num']

" VIM-MARKDOWN {{{2
let g:vim_markdown_override_foldtext = 0
let g:vim_markdown_toc_autofit = 1
" To avoid conflict with bullet plugin, still not ideal TODO.
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0

" INDENTLINE {{{2
" Note that as it stands, indentLine seems to have control over conceal. So
" conceal color and behavior should be configured here, rather than via `set
" concealcursor`, etc.
let g:indentLine_color_term = "darkgray"
let g:indentLine_char = "â”Š"
let g:indentLine_concealcursor = ""

" LION {{{2
let g:lion_squeeze_spaces = 1

" SNEAK {{{2
let g:sneak#label = 0

" VIMTEX {{{2
let g:vimtex_compiler_enabled = 1
let g:vimtex_compiler_method = "tectonic"
let g:vimtex_compiler_tectonic = {
    \ 'build_dir' : 'build',
    \ 'options' : [
    \   '--keep-logs',
    \ ],
\}
let g:vimtex_quickfix_autoclose_after_keystrokes = 1
