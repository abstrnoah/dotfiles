set nocompatible
set exrc

"
" Setup vim-plug.
"
" Automatic installation.
" [https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation]
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vimplug')
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'preservim/nerdtree'
    Plug 'preservim/tagbar'
    Plug '907th/vim-auto-save'
    Plug 'Townk/vim-autoclose'
    Plug 'ludovicchabant/vim-gutentags'
    Plug 'vim-latex/vim-latex', {'for': 'tex'}
    Plug 'tpope/vim-surround'
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'honza/vim-snippets'
    Plug 'puremourning/vimspector'
    Plug 'wellle/targets.vim'
    Plug 'tpope/vim-repeat'
    Plug 'dkarter/bullets.vim'
    Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
    Plug 'https://gitlab.com/dbeniamine/cheat.sh-vim.git'
    " Note that 'godlygeek/tabular' might also be a good table-formatting
    " plugin; it might be more bare-bones, but perhaps more versatile?
    Plug 'dhruvasagar/vim-table-mode'
call plug#end()

" Called automatically by `plug#end`.
"filetype plugin indent on
"syntax enable


"
" Functions.
" TODO: Should probably be moved to its own plugin directory at some point.
"
function AN_NERDTree()
    " Call `:NERDTreeFind` if path nonempty, otherwise `:NERDTreeVCS`.
    if &modifiable && strlen(expand("%")) > 0 && !&diff
        NERDTreeFind
    else
        NERDTreeVCS
    endif
endfunction

" See [https://vim.fandom.com/wiki/Search_across_multiple_lines].
" TODO learn more about functions, esp. arguments.
" TODO also search across underscores.
" Search across lines and non-word characters. Case-sensitive if '!'.
function! SearchMultiline(bang, ...)
    if a:0 > 0
        "let sep = (a:bang) ? '\_W\+' : '\_s\+'
        let sep = '\(\_W\|_\)\+'
        let @/ = join(a:000, sep) . ((a:bang) ? "" : '\c')
    endif
endfunction

function ToggleColorColumn()
    if &colorcolumn == ""
        set colorcolumn=+1
    else
        set colorcolumn=
    endif
endfunction


"
" Mapping.
" For most bindings, see 'after/plugin/keys.vim'.
"
let mapleader = ","
set showcmd
set timeoutlen=200

"
" Commands.
"
" TODO ReVim not really working.
command ReVim source $MYVIMRC
command TrimTrailingWhitespace %s/\s\+$//g
command! -bang -nargs=* -complete=tag S
    \ call SearchMultiline(<bang>0, <f-args>)
    \ | normal! /<C-R>/<CR>
command! -bang -nargs=* -complete=tag SB
    \ call SearchMultiline(<bang>0, <f-args>)
    \ | normal! ?<C-R>/<CR>

"
" Ecoding.
"
set encoding=utf-8

"
" Graphical interface.
"
set relativenumber number
set scrolloff=3
set laststatus=2
set statusline=%<%f\ %h%m%r\ %y%=%-14.(%l,%c%V%)\ %P
" Folding really just gets in my way, so disable for now.
set nofoldenable
set foldmethod=syntax
set foldlevelstart=99

"
" Theme
"
" TODO This depends on my jenky gnome terminal colour scheme, need to overhaul
" colour pallet.
highlight StatusLine ctermbg=blue ctermfg=black
set incsearch hlsearch
highlight Search ctermbg=black
highlight Visual ctermbg=black
highlight TrailingWhitespace ctermbg=red
match TrailingWhitespace /\s\+$/
autocmd BufWinEnter * match TrailingWhitespace /\s\+$/
" TODO Figure out how this pattern works.
autocmd InsertEnter * match TrailingWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match TrailingWhitespace /\s\+$/
" Fixed preformance issue,
" see [https://vim.fandom.com/wiki/Highlight_unwanted_spaces].
autocmd BufWinLeave * call clearmatches()

"
" Indent, wrap, margins, format
"

set colorcolumn=
call ToggleColorColumn()

highlight ColorColumn ctermbg=lightgrey guibg=lightgrey
set tabstop=4 expandtab softtabstop=4
set wrap linebreak nolist textwidth=80
set autoindent
set shiftwidth=4
set formatoptions+=j

"
" Plugin configuration.
"

" autosave
let g:auto_save = 1
let g:auto_save_in_insert_mode = 0

" NERDTree
let NERDTreeQuitOnOpen = 1

" Coc
source ~/.vim/cocrc.vim

" Vimspector
let g:vimspector_install_gadgets = [
    \ 'debugpy',
    \ 'vscode-cpptools',
    \ 'vscode-java-debug'
\]
" See [https://github.com/puremourning/vimspector#mappings].
nmap <leader>2      <Plug>VimspectorContinue
nmap <leader><c-2>  <Plug>VimspectorStop
nmap <leader>3      <Plug>VimspectorPause
nmap <leader>4      <Plug>VimspectorToggleBreakpoint
nmap <leader><c-4>  <Plug>VimspectorAddFunctionBreakpoint
nmap <leader>5      <Plug>VimspectorStepOver
nmap <leader>6      <Plug>VimspectorStepInto
nmap <leader><c-6>  <Plug>VimspectorStepOut
nmap <leader>0      <Plug>VimspectorRunToCursor

" CtrlP
let g:ctrlp_working_path_mode = "ra"
let g:ctrlp_show_hidden = 1
let g:ctrlp_user_command = {
    \ 'types': {
        \ 1: ['.git', 'cd %s && git ls-files -co --exclude-standard'],
    \ },
    \ 'fallback': 'find %s -type f'
\ }

" Gutentags
let g:gutentags_cache_dir = "~/.cache/gutentags"

" Tagbar
let g:tagbar_sort = 1

" Bullet
let g:bullets_checkbox_markers = ' ○◐●✓'
" Use numbers for all levels of enumerated lists.
" This is partly for uniformity, but also because `vim-markdown` makes numbered
" lists pretty, yet does not recognize alphabetic lists so does not make them
" pretty.
let g:bullets_outline_levels = ['num']

" vim-markdown
let g:vim_markdown_override_foldtext = 0
let g:vim_markdown_toc_autofit = 1
" To avoid conflict with bullet plugin, still not ideal TODO.
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0

" cheat.sh-vim
let g:CheatDoNotReplaceKeywordPrg = 1
