#!/bin/sh

# usage: sh ./install <name>
#
# Where attribute `envs.<name>` is the environment to be deployed to $HOME.
#
# All configuration except <name> is via the following environment variables:
#
# - HOME
#     - determines destination of ~/.dotfiles-env
# - DOTFILES_PATH
#     - seat of the live git repository
#     - default $HOME/.dotfiles
# - DEBUG
#     - whether to run with `set -x`
# - DOTFILES_INSTALL_MODE
#     - TODO not implemented
#     - one of "portable", "nonportable", "auto"
#
# Note that the user may not configure DOTFILES_ENV, the seat of the resulting
# dotfiles environment, which is hard-coded to $HOME/.dotfiles-env. The script
# will not overwrite this path if it does not already point to the nix store (as
# interpreted by nix-build). One reason for this is that we need to be able to
# determine if DOTFILES_ENV already is deployed so that it can be unstowed
# before deploying the new one.

# The goal of this script is to deploy the specified dotfiles environment to
# your home directory with minimal dependencies. The script tries to
# fetch/install Nix, the dotfiles repository, and any other requirements
# automatically. This means that the script can (hopefully) be run in the
# absence of the containing git repository like
#
#     sh <(curl -L https://raw.githubusercontent.com/abstrnoah/dotfiles/main/install)
#
# or after the repo has already been installed and is under development, or
# anywhere in between.
#
# Procedural outline:
# - bootstrap if Nix or $HOME/.dotfiles is missing
#     - this requires nix, nix-portable, curl, wget, or bash with tcp support,
#       to be installed, in that order of preference
#     - bootstrap means install working version of Nix and deploy dotfiles
#       repository to $HOME/.dotfiles
#     - TODO currently only supports nix-portable
# - atomically (as best we can) build and deploy envs.$1
#     - unstow $HOME/.dotfiles-env/home/me if exists
#     - save old $HOME/.dotfiles-env temporarily
#     - build envs.$1 in nix store and link to $HOME/.dotfiles-env
#     - stow $HOME/.dotfiles-env/home/me to $HOME
#
# TODO:
# The script attempts to be as atomic as possible. It trys dry-runs first where
# possible and does as much as possible in a temporary directory. There are two
# notable exceptions:
# - If the process is inturrupted after unstowing and is unable to re-stow
#   during trap, then $HOME may be left in an unstable state.
# - Currently, the dotfiles repo is cloned directly to $HOME/.dotfiles if it
#   does not already exist, and no attempt is made to remove it during clean up.
#   This is for simplicitly and to make live development easy (as is common with
#   dotfiles).
#
# TODO: Currently, the script only supports installing Nix in multi-user mode
# (though if another natively-intalled Nix is installed already, then it can be
# used) and does not support using nix-portable for post-bootstrap operations.

{ # wrap to avoid execution if incompletely fetched

    if test -n "${DEBUG}"; then
        set -x
    fi

    umask 0022

    oops() {
        echo "${0}:" fatal: "${@}"
        exit 1
    }

    temp_dir="$(mktemp -d \
                || oops "unable to create temporary build directory")"

    success=false
    teardown() {
        if test "${success}" = false && test -L "${DOTFILES_ENV_OLD}"; then
            mv -T "${DOTFILES_ENV_OLD}" "${DOTFILES_ENV}" \
            && stow_env \
            || echo "${0}: unable to restore env during premature termination"
        fi
        rm -rf "${temp_dir}"
    }
    trap teardown EXIT INT QUIT TERM

    NIX_INSTALLER_URL="https://releases.nixos.org/nix/nix-2.13.3/install"
    NIX_INSTALLER_SCRIPT="${temp_dir}/install_nix"
    NIX_INSTALLER_HASH="a90a3dadfe59fcebbafd361d0a0d05474008d82b17337fb94b06a5f1fa29ba32"
    NIX_PORTABLE_URL="https://github.com/DavHau/nix-portable/releases/download/v009/nix-portable"
    NIX_PORTABLE_HASH="e371dc77d8cdb4fefacdd2d8abf9b5ce013bb384a2b37def7b96e8dcb0d77790"

    test -d "${HOME}" || oops "you seem to be homeless: HOME=${HOME}"

    # DOTFILES_INSTALL_MODE="${DOTFILES_INSTALL_MODE:-auto}" # TODO support

    # TODO poorly documented, check that this works
    export NIX_INSTALLER_NO_MODIFY_PROFILE=1

    DOTFILES_URL="https://github.com/abstrnoah/dotfiles"
    DOTFILES_PATH="${DOTFILES_PATH:-${HOME}/.dotfiles}"
    DOTFILES_ENV="${HOME}/.dotfiles-env"
    DOTFILES_ENV_OLD="${temp_dir}/dotfiles-env.old"

    command_exists() {
        command -v "${1}" > /dev/null 2>&1
    }

    require_exec() {
        command_exists "${1}" || oops "requisite executable missing: ${1}"
    }

    require_file() {
        test -f "${1}" || oops "requisite file missing: ${1}"
    }

    nix_shell() {
        # TODO move to flake
        require_exec ./nix-portable
        LOCALE_ARCHIVE=/nix/store/20dyxqvd9rnwzdnpdzb8vnv8w3vwa8wx-glibc-locales-2.31-74/lib/locale/locale-archive \
            ./nix-portable nix shell \
                'nixpkgs#coreutils' \
                'nixpkgs#curl' \
                'nixpkgs#git' \
                'nixpkgs#glibcLocales' \
                'nixpkgs#stow' \
                -c "${@}"
    }

    # TODO
    nix_shell_post_boot() {
        require_exec nix
        nix --extra-experimental-features nix-command \
            --extra-experimental-features flakes \
            shell \
            'nixpkgs#coreutils' \
            'nixpkgs#curl' \
            'nixpkgs#git' \
            'nixpkgs#glibcLocales' \
            'nixpkgs#stow' \
            -c "${@}"
    }

    repo_exists() {
        nix_shell git -C "${1}" status > /dev/null 2>&1
    }

    get_hash() {
        require_file "${1}"
        nix_shell sha256sum "${1}" | nix_shell cut -c1-64
    }

    check_hash() {
        local h="$(get_hash "${1}")"
        test "${h}" = "${2}" || oops "hash mismatch: ${1}"
    }

    fetch() {
        echo "fetching ${1} to ${2} ..."
        nix_shell curl --fail -L "${1}" -o "${2}"
        check_hash "${2}" "${3}"
    }

    git_clone() {
        echo "cloning ${1} to ${2} ..."
        nix_shell git clone "${1}" "${2}"
        repo_exists "${2}" || oops "clone failed"
    }

    install_nix() {
        if command_exists nix; then return; fi

        fetch \
            "${NIX_INSTALLER_URL}" \
            "${NIX_INSTALLER_SCRIPT}" \
            "${NIX_INSTALLER_HASH}"
        require_file "${NIX_INSTALLER_SCRIPT}"

        echo "starting nix installer in multi-user mode..."
        sh "${NIX_INSTALLER_SCRIPT}" --daemon || oops "nix installer failed"
        echo "nix installer exited successfully"

        command_exists nix || oops "nix failed to appear in PATH"
    }

    fetch_dotfiles() {
        if repo_exists "${DOTFILES_PATH}"; then return; fi

        test -d "${DOTFILES_PATH}" \
        || oops "refusing to overwrite: ${DOTFILES_PATH}"
        git_clone "${DOTFILES_URL}" "${DOTFILES_PATH}"
    }

    bootstrap() {
        echo "bootstrapping..."
        install_nix
        fetch_dotfiles
        echo "bootstrapping complete"
    }

    stow() {
        # TODO
        # (https://github.com/aspiers/stow/issues/65)
        # nix_shell_post_boot stow "$@" \
        #     2>&1 | (grep -v 'BUG in find_stowed_path? Absolute/relative mismatch' 1>&2 || true)
        nix_shell_post_boot stow "$@" > /dev/null 2>&1
    }

    stow_home() {
        local oper="${1}"
        local src="${2}/home"

        test "${oper}" = --delete || test "${oper}" = --stow \
        || oops "unrecognised stow operation: ${oper}"
        test -d "${src}" || oops "stow source missing: ${src}"

        stow --target "${HOME}" --dir "${src}" "${oper}" me
    }

    unstow_env() {
        stow_home --delete "${DOTFILES_ENV}" || oops "failed to unstow env"
    }

    stow_env() {
        stow_home --stow "${DOTFILES_ENV}" || oops "failed to stow env"
    }

    deploy_env() {
        local env_name="${1}"
        test -n "${env_name}" || oops "env name is empty"

        echo "deploying env: ${1} ..."

        if test -L "${DOTFILES_ENV}"; then
            unstow_env
            mv -T "${DOTFILES_ENV}" "${DOTFILES_ENV_OLD}"
        fi

        require_exec nix-build
        require_file "${DOTFILES_PATH}/default.nix"
        nix-build "${DOTFILES_PATH}/default.nix" \
            -A "envs.${env_name}" -o "${DOTFILES_ENV}" \
        || oops "failed to build env: ${env_name}"

        stow_env

        echo "deployment complete"
    }

    bootstrap
    deploy_env "${1}"

    success=true # for trap

}
